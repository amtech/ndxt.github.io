(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{77:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),s("p",[t._v("先腾框架的安全体系采用了spring security的框架。本文主要阐述框架中在身份认证和session管理方面的考虑。")]),s("h1",{attrs:{id:"身份认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#身份认证","aria-hidden":"true"}},[t._v("#")]),t._v(" 身份认证")]),s("h2",{attrs:{id:"认证方式配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#认证方式配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 认证方式配置")]),s("p",[t._v("Spring security提供了多种认证方式：ldap、用户名密码、cas单点登录、OAuth等等，非常灵活，我们只需要做响应的配置就可以了。日常中我们用的最多的就是用户名密码和单点登录。所以框架"),s("a",{attrs:{href:"https://github.com/ndxt/centit-framework/tree/master/framework-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("framework-config")]),t._v("中实现了这两个类验证的配置方式，开发人员只要在属性文件中配置以下内容就可以了。")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 启动用户名密码验证\nlogin.dao.enable= true\n# 启动cas单点登录认证\nlogin.cas.enable= false\nlogin.cas.localHome = http://localhost:8085/framework\nlogin.cas.casHome = http://localhost:8080/centit-cas\n")])]),s("p",[t._v("如果使用其他的配置方式就需要将这两个属性都配置为false，然后自行编写对应的配置类。")]),s("h2",{attrs:{id:"密码加密方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#密码加密方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 密码加密方式")]),s("p",[t._v("使用用户名密码配置时，密码是要加密为密文存储的，笔者认为一个好的密码加密方式应该具备一下特点：")]),s("ol",[s("li",[t._v("密文不可逆，就是无法从密文知道密码，这个一般用散列的方式，比如：md5，SHA-1等散列算法。")]),s("li",[t._v("相同的密码密文不能都是一样，所以一般在散列算法中“加盐”，并且为了提高破解难度可能会多次散列。")]),s("li",[t._v("不同用户的密文不能通用，就是一个用户密文复制到另外一个用户名下，不能使用，这个可以将2中的盐和用户的主键关联。")])]),s("p",[t._v("Spring security 4.* 版本以后推荐使用 org.springframework.security.crypto.password.PasswordEncoder 不支持上面的3特性，而之前 org.springframework.security.authentication.encoding.PasswordEncoder 是支持用户属性作为盐的。Spring 的理由是“ better accommodates best practice of randomly generated salt that is included with the  password.” 好在这两个接口都得以保留。框架同时实现了这两个接口，开发人员可以根据自己的需求选择。开发人员只要定义，源码参见"),s("a",{attrs:{href:"https://github.com/ndxt/centit-framework/tree/master/framework-core/src/main/java/com/centit/framework/security/model",target:"_blank",rel:"noopener noreferrer"}},[t._v("framework-core")]),t._v(" ，通过bean的形式注入到框架中:")]),s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" \t"),s("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"passwordEncoder"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Object "),s("span",{attrs:{class:"token function"}},[t._v("passwordEncoder")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{attrs:{class:"token comment"}},[t._v("// org.springframework.security.crypto.password.PasswordEncoder ")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StandardPasswordEncoderImpl")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// org.springframework.security.authentication.encoding.PasswordEncoder ")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("//return new CentitPasswordEncoderImpl();")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("h1",{attrs:{id:"session管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session管理","aria-hidden":"true"}},[t._v("#")]),t._v(" session管理")]),s("h2",{attrs:{id:"session的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session的内容","aria-hidden":"true"}},[t._v("#")]),t._v(" session的内容")]),s("p",[t._v("用户登录后框架会创建一个 "),s("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/security/model/CentitUserDetails.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("CentitUserDetails")]),t._v(" 对象。它包含：")]),s("ol",[s("li",[t._v("用户的基本信息")]),s("li",[t._v("用户的岗位信息")]),s("li",[t._v("用户的权限信息")]),s("li",[t._v("用户的角色列表")]),s("li",[t._v("用户的设置信息")])]),s("h2",{attrs:{id:"session持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session持久化","aria-hidden":"true"}},[t._v("#")]),t._v(" session持久化")]),s("p",[t._v("Session可以存放在内存中，也可以存放在数据库比如H2或者Redis数据库中。需要实现"),s("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/security/model/MemorySessionRegistryImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("SessionRegistry")]),t._v(" 接口。")]),s("h1",{attrs:{id:"用户登录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户登录","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户登录")]),s("h2",{attrs:{id:"登录方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#登录方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 登录方式")]),s("ol",[s("li",[t._v("系统集成的spring security 有多种登录方式，可以通过配置实现用户名密码登录、ldap登录、cas单点登录等等。")]),s("li",[t._v('为了提供进程间通讯，提供给应用程序客户端的登录方式"/system/mainframe/loginasclient"这个和spring security 提供的login接口一样，不同的是这个提供了特别的授权方式，让登录的服务可以访问系统提供的服务接口。')]),s("li",[t._v('第三方认证互信接口"/system/mainframe/loginasthird"，调用这个接口需要提供ThirdPartyCheckUserDetails类型的bean它需要开发人员自己实现第三方认证机制。')])]),s("h2",{attrs:{id:"身份识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#身份识别","aria-hidden":"true"}},[t._v("#")]),t._v(" 身份识别")]),s("p",[t._v("一般请求可以通过携带cookie的方式来说明自己的身份，在无法使用cookie的情况下可以在request的header的Authorization属性中设置token，这个token在用户以ajax形式认证时服务器返回的信息中包括这个值，客户端需要保存好这个token。")])])}],!1,null,null,null);a.default=r.exports}}]);