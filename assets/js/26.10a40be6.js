(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{66:function(t,a,n){"use strict";n.r(a);var e=n(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"动机"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动机","aria-hidden":"true"}},[t._v("#")]),t._v(" 动机")]),n("p",[t._v("主流的Orm框架有Hibernate、Mybatis和Spring Data。以往我一直推荐使用Hibernate，使用jpa注解不需要写sql语句也不要配置文件，确实比较便捷。说hibernate效率低下，主要式指用hibernate进行查询和统计，我觉得这是不公平的，查询可以原生sql直接返回jsonarry来做，没有必要用hibernate的orm模型做。hibernate功能确实强大，换一个方式来说也就是很难娴熟的掌握，光是对象的三种状态就把一半人搞晕。所以现在我也不推荐大家使用了，没有必要在持久化层花费太多尽力学习。MyBatis现在用的人越来越多，但是比较烦它的配置文件越来越讨厌xml格式的配置文件。Spring Data接触的较少；但是到时有很多人用spring jdbc。"),n("a",{attrs:{href:"https://ndxt.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("先腾框架")]),t._v("中"),n("a",{attrs:{href:"https://github.com/ndxt/centit-persistence",target:"_blank",rel:"noopener noreferrer"}},[t._v("持久化模块")]),t._v("中有三个自摸库分别对Hibernate、Mybatis和spring jdbc进行了封装，让开发人员可以选择不同的技术，但使用的接口有尽量统一。")]),n("p",[t._v("这篇博文主要将用jdbc实现jpa，这个作用就是将使用jdbc的方式和hibernate一样，jpa的标准就是jboss提供的。"),n("a",{attrs:{href:"https://github.com/ndxt/centit-commons/tree/master/centit-database/src/main/java/com/centit/support/database/orm",target:"_blank",rel:"noopener noreferrer"}},[t._v("工程源码")]),t._v("。先腾的Orm只实现了数据库增删改查的基本操作，没有实现缓存之类的额外特性。是JPA的一个最常用的子集，在系统开发的实践中验证过能够满足一般业务系统的开发需求。")]),n("h1",{attrs:{id:"jpa注解扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jpa注解扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" jpa注解扩展")]),n("p",[t._v("JPA注解已经很全，但是一些细节不太满意，对其进行了扩展。")]),n("h2",{attrs:{id:"lazy-懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lazy-懒加载","aria-hidden":"true"}},[t._v("#")]),t._v(" Lazy 懒加载")]),n("p",[t._v("JPA的关联注解（OneToMany、ManyToOne）中FetchType有lazy懒加载的选项。Lob字段的默认也是懒加载的，但是感觉并不是直观。 所以添加了一个Lazy注解，用于字段Column属性，明确的标注这个字段为懒加载，而不考虑这个字段是否式lob字段，任何类型都可以懒加载。\n另外，所以的关联关系都是默认懒加载的，并且无法修改这个默认属性，如果需要同步加载，在调用方法中需要明确说明，这样避免没有必要的性能消耗。")]),n("h2",{attrs:{id:"valuegenerator-值生成器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#valuegenerator-值生成器","aria-hidden":"true"}},[t._v("#")]),t._v(" ValueGenerator 值生成器")]),n("p",[t._v("JPA 有一个注解GeneratedValue 这个式用于主键的，并且不够灵活，所以定义了一个ValueGenerator注解，这个注解并不要一定用在主键上，任何字段都可以，可以把它作为insert 或者 update 的前置触发器。")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("METHOD"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FIELD"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RUNTIME"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" @"),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("ValueGenerator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 数值生成方式 \n     *   Auto 数据库自动增长、 SEQUENCE 序列 value中保存序列名称 、\n     *   UUID 、 CONSTANT 常量 value中保存常量、\n     *   FUNCTION 公式 value中保存公式，是一个四则运算表达式，可以通过变量引用这个对象的其他属性\n     * @return GeneratorType\n     */")]),t._v("\n    GeneratorType "),n("span",{attrs:{class:"token function"}},[t._v("strategy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" GeneratorType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AUTO"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 数值生成时机 NEW （insert） UPDATE （update） READ （select）\n     * @return GeneratorTime\n     */")]),t._v("\n    GeneratorTime "),n("span",{attrs:{class:"token function"}},[t._v("occasion")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" GeneratorTime"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NEW"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 生成条件 IFNULL 数值为空时生成 ALWAYS 总是生成，会覆盖已有的值\n     * @return GeneratorCondition\n     */")]),t._v("\n    GeneratorCondition "),n("span",{attrs:{class:"token function"}},[t._v("condition")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" GeneratorCondition"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IFNULL"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 具体生成参数 对应 GeneratorType 不同有不用的意思\n     * @return\n     */")]),t._v("\n    String "),n("span",{attrs:{class:"token function"}},[t._v("value")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('""')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("需要特别说明的式strategy =  GeneratorType.FUNCTION 非常灵活可以通过对象的其他属性计算得出这个字段的值，这时value中的值为"),n("a",{attrs:{href:"https://blog.csdn.net/code_fan/article/details/81352458",target:"_blank",rel:"noopener noreferrer"}},[t._v("四则运算表达式")]),t._v("。使用示例：")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * UPDATEDATE(更新时间) 更新时间\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"UPDATE_DATE"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@ValueGenerator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" strategy"),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" GeneratorType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FUNCTION"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"today()"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t    condition "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" GeneratorCondition"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ALWAYS"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" occasion "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" GeneratorTime"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ALWAYS "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" Date  updateDate"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("这个注解的意思就是只要这个对象有更新，updateDate字段就更新为当前日期，代码中无需对这个字段赋值。")]),n("h1",{attrs:{id:"元数据-jpametadata"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元数据-jpametadata","aria-hidden":"true"}},[t._v("#")]),t._v(" 元数据 JpaMetadata")]),n("p",[t._v("JpaMetadata 中维护了类和数据库表结构的对应关系，在第一次使用到这个类的时候收集类上的注解信息，并将其保存在JpaMetadata中。每次访问数据库就是根据这个元数据来生成sql语句。框架中 JsonObjectDao 类实现了不同数据库之间的方言，这个不是本文的重点，有兴趣的可以看一下，欢迎给出宝贵建议。")]),n("h1",{attrs:{id:"jpa的增删改查具体实现-ormdaoutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jpa的增删改查具体实现-ormdaoutils","aria-hidden":"true"}},[t._v("#")]),t._v(" JPA的增删改查具体实现 OrmDaoUtils")]),n("p",[t._v("OrmDaoUtils 中所有的方法都需要传递一个connection 数据库连接参数。其中的方法分以下几类：")]),n("h2",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get","aria-hidden":"true"}},[t._v("#")]),t._v(" get*")]),n("p",[t._v("getObject* 就是获取一个对象的查询。")]),n("h2",{attrs:{id:"list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list","aria-hidden":"true"}},[t._v("#")]),t._v(" list*")]),n("p",[t._v("listObjects* 就是更加属性查询一组对象，可以分页查询。")]),n("h2",{attrs:{id:"query"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#query","aria-hidden":"true"}},[t._v("#")]),t._v(" query*")]),n("p",[t._v("queryObjects* 是更加sql语句查询，这个相对更加灵活，可以分页查询。")]),n("h2",{attrs:{id:"save"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#save","aria-hidden":"true"}},[t._v("#")]),t._v(" save*")]),n("p",[t._v("save* Object * 保存新对象。")]),n("h2",{attrs:{id:"update"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#update","aria-hidden":"true"}},[t._v("#")]),t._v(" update*")]),n("p",[t._v("updateObject 更改对象。")]),n("h2",{attrs:{id:"merge"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#merge","aria-hidden":"true"}},[t._v("#")]),t._v(" merge*")]),n("p",[t._v("mergeObject 合并对象，可以理解为insert Or Update。")]),n("h2",{attrs:{id:"cascade"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cascade","aria-hidden":"true"}},[t._v("#")]),t._v(" *  Cascade *")]),n("p",[t._v("方法名中有Cascade单词的，表示会级联查询，就是会根据OneToMany、OneToOne等等关联关系查询关联表。")]),n("h2",{attrs:{id:"fetch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fetch","aria-hidden":"true"}},[t._v("#")]),t._v(" fetch*")]),n("p",[t._v("fetch* 方法为获取Lazy对应的字段。")]),n("h1",{attrs:{id:"持久化框架考虑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#持久化框架考虑","aria-hidden":"true"}},[t._v("#")]),t._v(" 持久化框架考虑")]),n("p",[t._v("在"),n("a",{attrs:{href:"https://ndxt.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("先腾框架")]),t._v("中"),n("a",{attrs:{href:"https://github.com/ndxt/centit-persistence",target:"_blank",rel:"noopener noreferrer"}},[t._v("持久化模块")]),t._v("中spring jdbc模块中，对这写方法进行了再次封装，将JdbcTemplate中的数据库链接传递给OrmDaoUtils，这样就不需要connection这个参数了，参见"),n("a",{attrs:{href:"https://github.com/ndxt/centit-persistence/blob/master/centit-persistence-jdbc/src/main/java/com/centit/framework/jdbc/dao/BaseDaoImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("BaseDaoImpl源码")]),t._v("。")])])}],!1,null,null,null);a.default=s.exports}}]);