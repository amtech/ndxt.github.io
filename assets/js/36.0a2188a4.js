(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{76:function(t,a,n){"use strict";n.r(a);var s=n(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),n("p",[t._v("框架中提供的基础服务都是通过接口将实现和调用分离，这样应用开发人员可以根据业务的需求定制符合用户需求的实现方式。")]),n("p",[t._v("系统中的消息分两种：")]),n("ol",[n("li",[t._v("信息，针对一个用户发送的信息，比如：待办提醒、日程提醒等待。")]),n("li",[t._v("通知，针对一个群体，比如：部门、小组，的广播消息。")])]),n("p",[t._v("框架中和通知相关的接口有两个：")]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("NotificationCenter 根据消息发送策略向用户发送消息。")]),n("li",[t._v("MessageSender 真正的消息发送接口。")])]),n("h1",{attrs:{id:"源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 源码分析")]),n("h2",{attrs:{id:"消息内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 消息内容")]),n("p",[t._v("消息内容可以是在线个用户发送的用户查看的信息，也可以是也前端应用改变状态的信息。消息内容可以和应用或者应用中的操作关联。")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("NoticeMessage")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("java"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Serializable")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 消息类别 默认值 msg\n     * 客户端可以根据不同的消息类别提供不同的 响应方式 或者 展示方式\n      */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String msgType"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** 消息主题 这不是必须的\n     * */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String msgSubject"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** 消息内容，为一个文本，不同的消息类别 可以有不同的格式\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String msgContent"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** 关联业务\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String optId"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**关联业务中的 方法、功能、模块\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String optMethod"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** 关联对象组件，多个主键用url参数的方式链接\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String optTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("h2",{attrs:{id:"接口messagesender"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口messagesender","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口MessageSender")]),n("p",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-adapter/src/main/java/com/centit/framework/model/adapter/MessageSender.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("MessageSender")]),t._v(" 只有一个需要实现的方法。它式真正发送消息的地方。")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * 发送内部系统消息\n     *\n     * @param sender     发送人内部用户编码\n     * @param receiver   接收人内部用户编码\n     * @param message 消息主体\n     * @return "OK" 表示成功，其他的为错误信息\n     */')]),t._v("\n    String "),n("span",{attrs:{class:"token function"}},[t._v("sendMessage")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" String sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NoticeMessage message"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("框架中内置了一些具体的实现：")]),n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/components/impl/DummyMessageSenderImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("DummyMessageSenderImpl")]),t._v("这个是一个哑实现，仅仅用于测试桩。")]),n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/components/impl/EmailMessageSenderImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("EmailMessageSenderImpl")]),t._v("是通过email发送消息的实现。")]),n("li",[t._v("项目"),n("a",{attrs:{href:"https://github.com/ndxt/centit-framework-system",target:"_blank",rel:"noopener noreferrer"}},[t._v("centit-framework-system")]),t._v("中"),n("a",{attrs:{href:"https://github.com/ndxt/centit-framework-system/blob/master/framework-system-module/src/main/java/com/centit/framework/system/service/impl/InnerMessageManagerImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("InnerMessageManagerImpl.java")]),t._v("实现了一个通过数据库表来存储的内部消息机制。")])]),n("h2",{attrs:{id:"接口notificationcenter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口notificationcenter","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口NotificationCenter")]),n("p",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-adapter/src/main/java/com/centit/framework/model/adapter/NotificationCenter.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("NotificationCenter")]),t._v(" 提供的发送消息的方式和接口MessageSender类似，额外多了写个消息发送注册接口，将方式方式（noticeType/sendType）和MessageSender 关联起来。NotificationCenter可以通过指定的方式给用户发送，也可以根据用户设置的接收方式发送，用户可以定义多个接收方式。默认情况下通过后者给用户发送消息。框架中也有多个实现：")]),n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/components/impl/SimpleNotificationCenterImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("SimpleNotificationCenterImpl")]),t._v(" 实现了唯一的发送方式的通知方案。")]),n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-framework/blob/master/framework-core/src/main/java/com/centit/framework/components/impl/NotificationCenterImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("NotificationCenterImpl")]),t._v(" 实现了可以根据用户设置接收方式的发送方案。")]),n("li",[t._v("项目 "),n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher",target:"_blank",rel:"noopener noreferrer"}},[t._v("centit-msgpusher")]),t._v(" 中的"),n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher/blob/master/msgpusher-notification/src/main/java/com/centit/msgpusher/notification/SimpleNotificationCenterPlusMsgPusherImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("SimpleNotificationCenterPlusMsgPusherImpl")]),t._v("在SimpleNotificationCenterImpl的基础上添加了对在线用户的websocket推送功能。使用这个功能需要引用msgpusher-notification 包。")]),n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher",target:"_blank",rel:"noopener noreferrer"}},[t._v("centit-msgpusher")]),n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher/blob/master/msgpusher-notification/src/main/java/com/centit/msgpusher/notification/NotificationCenterPlusMsgPusherImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("NotificationCenterPlusMsgPusherImpl")]),t._v("和上面的相似在NotificationCenterImpl的基础上添加了对在线用户的websocket推送功能。")]),n("li",[n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher",target:"_blank",rel:"noopener noreferrer"}},[t._v("centit-msgpusher")]),n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher/blob/master/msgpusher-client/src/main/java/com/centit/msgpusher/client/MsgPusherNotificationImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("MsgPusherNotificationImpl")]),t._v("，这类是将消息发送的实现交给"),n("a",{attrs:{href:"https://github.com/ndxt/centit-msgpusher/tree/master/msgpusher-server",target:"_blank",rel:"noopener noreferrer"}},[t._v("msgpusher-server")]),t._v("服务，msgpusher-server可以通过websocket对pc在线用户发送消息，同时也可以对iOS和android用户实现实时的消息推送。使用这个功能需要引用msgpusher-client 包，同时要启动msgpusher-server服务，这个服务需要单独运行。")])]),n("h1",{attrs:{id:"使用示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用示例")]),n("p",[t._v("使用通知中心，需要分四步：")]),n("ol",[n("li",[t._v("定义消息发送类的bean（实现MessageSender接口的bean），可以有多个、也可以没有 在使用msgpusher-server时就不需要。")])]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("\t"),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" EmailMessageSenderImpl "),n("span",{attrs:{class:"token function"}},[t._v("emailMessageSender")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        EmailMessageSenderImpl sender "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("EmailMessageSenderImpl")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setHostName")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"mail.centit.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setUserName")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"suport"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setUserPassword")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"********"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setServerEmail")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"suport@centit.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("定义个通知中心bean（实现NotificationCenter接口的bean）。")])]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("\t"),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" NotificationCenter "),n("span",{attrs:{class:"token function"}},[t._v("notificationCenter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        NotificationCenterImpl notificationCenter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("NotificationCenterImpl")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("//这个不是必须的,只是为了在没有真正的发送类时不报错")]),t._v("\n        notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("initDummyMsgSenders")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("//打开消息推送服务日志")]),t._v("\n        notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("setWriteNoticeLog")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("在web初始化时将消息发送类的bean注册到通知中心bean中。")])]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("InstantiationServiceBeanPostProcessor")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("ApplicationListener")]),n("span",{attrs:{class:"token generics function"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ContextRefreshedEvent"),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" NotificationCenter notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" EmailMessageSenderImpl emailMessageSender"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("onApplicationEvent")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ContextRefreshedEvent event"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("registerMessageSender")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"email"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emailMessageSender"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("appointDefaultSendType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"email"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("在使用的地方引入 通知中心bean 。")])]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" NotificationCenter notificationCenter"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],!1,null,null,null);a.default=e.exports}}]);